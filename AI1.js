// AI1.js - ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏ß‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏/‡∏£‡∏±‡∏Å‡∏©‡∏≤ + ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á + ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡πÅ‡∏ô‡∏Å
const URL = "https://teachablemachine.withgoogle.com/models/l_zvMSkA3/";
let model, labelContainer, maxPredictions;
let isPredicting = false;
let currentFacingMode = 'environment';
let videoElement, stream;

const messageElement = document.getElementById('message');
const startButton = document.getElementById('startButton');
const stopButton = document.getElementById('stopButton');
const switchCameraButton = document.getElementById('switchCameraButton');
const resultDisplayElement = document.getElementById('resultDisplay');
const actionButtonsDiv = document.getElementById('actionButtons');
const infoButtonsDiv = document.getElementById('infoButtons');
const causeButton = document.getElementById('causeButton');
const treatmentButton = document.getElementById('treatmentButton');

let predictionHistory = [];
const REQUIRED_CONSISTENCY_TIME_MS = 2000;
const REQUIRED_PROBABILITY = 0.9;

function toggleInfoButtons(show) {
    infoButtonsDiv.classList.toggle('hidden', !show);
    actionButtonsDiv.classList.toggle('hidden', show);
}

function showMessage(text, type = '') {
    messageElement.textContent = text;
    messageElement.className = `message ${type}`.trim();
}

function showError(text) {
    showMessage(text, 'error');
    startButton.disabled = false;
    stopButton.disabled = true;
    switchCameraButton.disabled = true;
}

async function init() {
    showMessage('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á...');
    startButton.disabled = true;
    stopButton.disabled = true;
    switchCameraButton.disabled = true;
    toggleInfoButtons(false);
    resultDisplayElement.innerHTML = '';
    predictionHistory = [];

    async function predict() {
    if (!videoElement || videoElement.readyState < 2) return;
    const prediction = await model.predict(videoElement);
    prediction.sort((a, b) => b.probability - a.probability);
    const top = prediction[0];
    const currentTime = Date.now();
    if (top.probability > 0.7) {
        predictionHistory.push({ className: top.className, probability: top.probability, time: currentTime });
    } else {
        predictionHistory = [];
    }
    predictionHistory = predictionHistory.filter(p => currentTime - p.time <= REQUIRED_CONSISTENCY_TIME_MS);

    const consistent = predictionHistory.length > 0 &&
        predictionHistory.every(p => p.className === top.className && p.probability >= REQUIRED_PROBABILITY) &&
        (predictionHistory[predictionHistory.length - 1].time - predictionHistory[0].time >= REQUIRED_CONSISTENCY_TIME_MS);

    if (consistent) {
        handleFinalResult(top.className); // ‡∏™‡πà‡∏á className ‡πÑ‡∏õ‡∏¢‡∏±‡∏á handleFinalResult
    } else {
        showResultHint(top);
    }
}

    try {
        model = await tmImage.load(`${URL}model.json`, `${URL}metadata.json`);
        maxPredictions = model.getTotalClasses();
    } catch (error) {
        showError(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•: ${error.message}`);
        return;
    }

    await setupCamera();

    labelContainer = document.getElementById("label-container");
    labelContainer.innerHTML = '';
    for (let i = 0; i < maxPredictions; i++) {
        labelContainer.appendChild(document.createElement("div"));
    }

    showMessage('‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å!', 'success');
    stopButton.disabled = false;
    switchCameraButton.disabled = false;
}

async function setupCamera() {
    if (stream) stream.getTracks().forEach(track => track.stop());

    const constraints = {
        video: { width: { ideal: 320 }, height: { ideal: 240 }, facingMode: currentFacingMode }
    };

    try {
        stream = await navigator.mediaDevices.getUserMedia(constraints);

        videoElement = document.createElement('video');
        videoElement.setAttribute('playsinline', true);
        videoElement.muted = true;
        videoElement.autoplay = true;
        videoElement.srcObject = stream;

        const webcamDiv = document.getElementById("webcam");
        webcamDiv.innerHTML = '';
        webcamDiv.appendChild(videoElement);

        await new Promise((resolve) => {
            videoElement.onloadedmetadata = () => resolve(videoElement.play());
            setTimeout(resolve, 3000);
        });

        isPredicting = true;
        window.requestAnimationFrame(loop);
    } catch (error) {
        let msg = error.name === 'NotAllowedError' ? '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á' :
                  error.name === 'NotFoundError' ? '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå' :
                  '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á';
        showError(msg);
    }
}

async function loop() {
    if (!isPredicting) return;
    await predict();
    window.requestAnimationFrame(loop);
}

async function predict() {
    if (!videoElement || videoElement.readyState < 2) return;

    const prediction = await model.predict(videoElement);
    prediction.sort((a, b) => b.probability - a.probability);

    const top = prediction[0];
    const currentTime = Date.now();

    if (top.probability > 0.7) {
        predictionHistory.push({ className: top.className, probability: top.probability, time: currentTime });
    } else {
        predictionHistory = [];
    }

    predictionHistory = predictionHistory.filter(p => currentTime - p.time <= REQUIRED_CONSISTENCY_TIME_MS);

    const consistent = predictionHistory.length > 0 &&
        predictionHistory.every(p => p.className === top.className && p.probability >= REQUIRED_PROBABILITY) &&
        (predictionHistory[predictionHistory.length - 1].time - predictionHistory[0].time >= REQUIRED_CONSISTENCY_TIME_MS);

    if (consistent) {
        handleFinalResult(top.className);
    } else {
        showResultHint(top);
    }
}

function handleFinalResult(className) {
    let resultText = {
        'D1': '‚úÖ ‡∏õ‡∏•‡∏≠‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÇ‡∏£‡∏Ñ ‚úÖ',
        'D2': 'üö® ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡∏à‡∏∏‡∏î‡∏£‡∏≤‡∏Ç‡∏≤‡∏ß üö®',
        'D3': 'üö® ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡∏™‡∏ô‡∏¥‡∏° üö®',
        'D4': 'üö® ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡πÑ‡∏´‡∏°‡πâ üö®',
        'D5': 'üö® ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà üö®',
        'D6': 'üö® ‡πÄ‡∏≠‡πä‡∏∞ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏∏‡∏Å‡∏ô‡πà‡∏∞ üö®',
        'D7': 'üïê ‡∏£‡∏≠‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏Å 2-3 ‡∏ß‡∏±‡∏ô üïê',
        'D8': '‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≤‡∏ô‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡∏´‡∏ß‡∏≤‡∏ô ‚úÖ'

        
    }[className] || `üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö: ${className}`;

    resultDisplayElement.innerHTML = `<h3>${resultText}</h3>`;
    resultDisplayElement.className = 'important-message';

    // ‚úÖ ‡πÉ‡∏ä‡πâ toggleInfoButtons ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö style ‡∏ï‡∏£‡∏á ‡πÜ ‡∏Å‡πá‡πÑ‡∏î‡πâ
    const shouldShowInfoButtons = ['V1', 'V2', 'V7', 'V8'].includes(className);
    document.getElementById("actionButtons").style.display = shouldShowInfoButtons ? 'none' : 'block';
    document.getElementById("infoButtons").style.display = shouldShowInfoButtons ? 'flex' : 'none';

    stopCamera();
}
 
// ‡∏¢‡πâ‡∏≤‡∏¢‡∏õ‡∏∏‡πà‡∏° "‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏" ‡πÅ‡∏•‡∏∞ "‡∏ß‡∏¥‡∏ò‡∏µ‡∏£‡∏±‡∏Å‡∏©‡∏≤" ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà #resultDisplay
function moveInfoButtonsToResultDisplay() {
    const causeButton = document.getElementById('causeButton');
    const treatmentButton = document.getElementById('treatmentButton');
    const resultDisplay = document.getElementById('resultDisplay');

    // ‡∏¢‡πâ‡∏≤‡∏¢‡∏õ‡∏∏‡πà‡∏° "‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏" ‡πÅ‡∏•‡∏∞ "‡∏ß‡∏¥‡∏ò‡∏µ‡∏£‡∏±‡∏Å‡∏©‡∏≤" ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà #resultDisplay
    resultDisplay.appendChild(causeButton);
    resultDisplay.appendChild(treatmentButton);

    // ‡∏•‡∏ö div #infoButtons ‡∏≠‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏°‡∏ã‡πâ‡∏≥
    const infoButtonsDiv = document.getElementById('infoButtons');
    infoButtonsDiv.remove();
}

function showResultHint(top) {
    const timeElapsed = predictionHistory.length > 0
        ? predictionHistory[predictionHistory.length - 1].time - predictionHistory[0].time
        : 0;
    const remaining = Math.max(0, Math.ceil((REQUIRED_CONSISTENCY_TIME_MS - timeElapsed) / 1000));
    resultDisplayElement.innerHTML = `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô "${top.className}" (${(top.probability * 100).toFixed(1)}%)<br>‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ${remaining} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`;
    resultDisplayElement.className = 'info-message';
}

async function stopCamera() {
    isPredicting = false;
    if (stream) stream.getTracks().forEach(track => track.stop());
    if (videoElement) videoElement.srcObject = null;
    document.getElementById("webcam").innerHTML = '<p>‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß</p>';
    showMessage('‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
    labelContainer.innerHTML = '';
    startButton.disabled = false;
    stopButton.disabled = true;
    switchCameraButton.disabled = true;
    predictionHistory = [];
}

async function switchCamera() {
    currentFacingMode = currentFacingMode === 'user' ? 'environment' : 'user';
    await stopCamera();
    await setupCamera();
    showMessage('‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å!', 'success');
    stopButton.disabled = false;
    switchCameraButton.disabled = false;
}

startButton.addEventListener('click', init);
stopButton.addEventListener('click', stopCamera);
switchCameraButton.addEventListener('click', switchCamera);

// function toggleButtons(className) {
//     console.log("Handling buttons for class:", className); // ‡πÄ‡∏û‡∏¥‡πà‡∏° log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
//     const actionButtons = document.querySelectorAll('#actionButtons button');
//     const infoButtons = document.querySelectorAll('#infoButtons button');
// }

async function stopCamera() {
    isPredicting = false;
    if (stream) stream.getTracks().forEach(track => track.stop());
    if (videoElement) videoElement.srcObject = null;
    document.getElementById("webcam").innerHTML = '<p>‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß</p>';
    showMessage('‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
    labelContainer.innerHTML = '';
    startButton.disabled = false;
    stopButton.disabled = true;
    switchCameraButton.disabled = true;
    predictionHistory = [];
}

async function switchCamera() {
    currentFacingMode = currentFacingMode === 'user' ? 'environment' : 'user';
    await stopCamera();
    await setupCamera();
    showMessage('‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å!', 'success');
    stopButton.disabled = false;
    switchCameraButton.disabled = false;
}

startButton.addEventListener('click', init);
stopButton.addEventListener('click', stopCamera);
switchCameraButton.addEventListener('click', switchCamera);

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û PNG
function showImage(imageUrl) {
    const existingModal = document.getElementById('imageModal');
    if (existingModal) existingModal.remove();

    const modal = document.createElement('div');
    modal.id = 'imageModal';
    modal.style.position = 'fixed';
    modal.style.top = '0';
    modal.style.left = '0';
    modal.style.width = '100%';
    modal.style.height = '100%';
    modal.style.backgroundColor = 'rgba(0,0,0,0.8)';
    modal.style.display = 'flex';
    modal.style.justifyContent = 'center';
    modal.style.alignItems = 'center';
    modal.style.zIndex = '9999';

    const img = document.createElement('img');
    img.src = imageUrl;
    img.alt = 'Disease Info';
    img.style.maxWidth = '90%';
    img.style.maxHeight = '80vh';
    img.style.objectFit = 'contain';

    const closeBtn = document.createElement('button');
    closeBtn.textContent = '‚ùå';
    closeBtn.style.position = 'absolute';
    closeBtn.style.top = '20px';
    closeBtn.style.right = '20px';
    closeBtn.style.fontSize = '24px';
    closeBtn.style.color = '#fff';
    closeBtn.style.background = 'transparent';
    closeBtn.style.border = 'none';
    closeBtn.style.cursor = 'pointer';

    closeBtn.addEventListener('click', () => modal.remove());

    modal.appendChild(img);
    modal.appendChild(closeBtn);
    document.body.appendChild(modal);
}

// ‡∏õ‡∏∏‡πà‡∏° "‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏"
causeButton.addEventListener('click', () => {
    const resultText = resultDisplayElement.querySelector('h3')?.textContent.trim() || '';
    let imageUrl = '';

    if (resultText.includes('‡∏à‡∏∏‡∏î‡∏£‡∏≤‡∏Ç‡∏≤‡∏ß')) {
        imageUrl = '14.png';
    } else if (resultText.includes('‡∏™‡∏ô‡∏¥‡∏°')) {
        imageUrl = '16.png';
    } else if (resultText.includes('‡πÉ‡∏ö‡πÑ‡∏´‡∏°‡πâ')) {
        imageUrl = '12.png';
    } else if (resultText.includes('‡∏£‡∏≤‡∏Ç‡∏≤‡∏ß')) {
        imageUrl = '201.png';
    }

    if (imageUrl) showImage(imageUrl);
});

// ‡∏õ‡∏∏‡πà‡∏° "‡∏ß‡∏¥‡∏ò‡∏µ‡∏£‡∏±‡∏Å‡∏©‡∏≤"
treatmentButton.addEventListener('click', () => {
    const resultText = resultDisplayElement.querySelector('h3')?.textContent.trim() || '';
    let imageUrl = '';

    if (resultText.includes('‡∏à‡∏∏‡∏î‡∏£‡∏≤‡∏Ç‡∏≤‡∏ß')) {
        imageUrl = '15.png';
    } else if (resultText.includes('‡∏™‡∏ô‡∏¥‡∏°')) {
        imageUrl = 'health3.png';
    } else if (resultText.includes('‡πÉ‡∏ö‡πÑ‡∏´‡∏°‡πâ')) {
        imageUrl = 'health4.png';
    } else if (resultText.includes('‡∏£‡∏≤‡∏Ç‡∏≤‡∏ß')) {
        imageUrl = 'health11.png';
    }

    if (imageUrl) showImage(imageUrl);
});


// ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
window.addEventListener('DOMContentLoaded', () => {
    toggleInfoButtons(false);
    stopButton.disabled = true;
    switchCameraButton.disabled = true;
    window.addEventListener('beforeunload', stopCamera);
});
